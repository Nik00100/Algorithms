package Sort.BucketSort_RadixSort;

/*Конечный алгоритм RadixSort состоит из двух вложенных циклов:

    Внешний цикл прохода по разрядам. Начинаем с младшего разряда и двигаемся к старшим разрядам.

    Внутренний цикл сортировки элементов в текущем разряде. Используется для сортировки элементов с помощью другого стабильного
    алгоритма сортировки (например, CountingSort).

Полный алгоритм RadixSort по шагам:

    Найдите максимальное число в массиве и определите количество разрядов в этом числе.
    Для каждого разряда от младшего к старшему выполните следующие действия:
        Инициализируйте вспомогательный массив count, размером 10 (по количеству возможных цифр в десятичной системе счисления).
        Пройдите по всем элементам массива и инкрементируйте значение соответствующего элемента массива count,
            соответствующее цифре текущего разряда.
        Вычислите префиксную сумму для массива count.
        Создайте выходной массив размером n (количество элементов во входном массиве).
        Пройдите по всем элементам массива в обратном порядке и поместите элемент в соответствующую позицию в выходном массиве
        согласно значению текущего разряда, используя массив count для вычисления индекса.
        Скопируйте отсортированный выходной массив во входной массив.
    В результате выполнения внешнего цикла массив будет отсортирован по всем разрядам.

Этот алгоритм поразрядной сортировки работает только с целыми числами и не подходит для сортировки массивов,
содержащих дробные числа или строки.*/
import java.util.Arrays;

public class RadixSort {
    public static void radixSort(int[] arr) {
        // Находим максимальный элемент массива
        int max = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }

        // Начинаем сортировку
        for (int exp = 1; max / exp > 0; exp *= 10) {
            countingSort(arr, exp);
        }
    }

    private static void countingSort(int[] arr, int exp) {
        int[] count = new int[10];
        int[] output = new int[arr.length];

        // Заполняем счетчик
        for (int i = 0; i < arr.length; i++) {
            count[(arr[i] / exp) % 10]++;
        }

        // Меняем значения в счетчике
        // count[i] содержит индекс цифры в массиве output[]
        for (int i = 1; i < 10; i++) {
            count[i] += count[i - 1];
        }

        // Создаем отсортированный массив
        for (int i = arr.length - 1; i >= 0; i--) {
            output[count[(arr[i] / exp) % 10] - 1] = arr[i];
            count[(arr[i] / exp) % 10]--;
        }

        // Копируем отсортированный массив в исходный
        for (int i = 0; i < arr.length; i++) {
            arr[i] = output[i];
        }
    }

    public static void main(String[] args) {
        int[] nums = {5,1,1,2,0,0};
        radixSort(nums);
        System.out.println(Arrays.toString(nums));
    }
}
