package DP.DPcurrencySpeculations;

/*Петя, изучая, как меняется курс рубля по отношению к доллару и евро, вывел закон, по которому происходят эти изменения (или думает, что вывел :) ). По этому закону Петя рассчитал, каков будет курс рубля по отношению к доллару и евро в ближайшие N дней.

У Пети есть 100 рублей. В каждый из дней он может обменивать валюты друг на друга по текущему курсу без ограничения количества (при этом курс доллара по отношению к евро соответствует величине, которую можно получить, обменяв доллар на рубли, а потом эти рубли — на евро). Поскольку Петя будет оперировать не с наличной валютой, а со счетом в банке, то он может совершать операции обмена с любым (в том числе и нецелым) количеством единиц любой валюты.

Напишите программу, которая вычисляет, какое наибольшее количество рублей сможет получить Петя к исходу N-го дня.

Законы изменения курсов устроены так, что в течение указанного периода рублевый эквивалент той суммы, которая может оказаться у Пети, не превысит 108 рублей.

Входные данные
Первая строка входного файла INPUT.TXT содержит одно число N (1 ≤ N ≤ 5000). В каждой из следующих N строк записано по 2 числа, вычисленных по Петиным законам для соответствующего дня — сколько рублей будет стоить 1 доллар, и сколько рублей будет стоить 1 евро. Все эти значения не меньше 0.01 и не больше 10000. Значения заданы точно и выражаются вещественными числами не более, чем с двумя знаками после десятичной точки.

Выходные данные
В выходной файл OUTPUT.TXT выведите искомую величину с двумя знаками после десятичной точки.*/

import java.io.*;

public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(reader.readLine());
        double[][] price = new double[n][2];

        for (int i = 0; i < n; i++) {
            String[] line = reader.readLine().split(" ");
            price[i][0] = Double.parseDouble(line[0]);
            price[i][1] = Double.parseDouble(line[1]);
        }

        double[][] dp = new double[n][3];
        dp[0][0] = 100;
        dp[0][1] = 100 / price[0][0];
        dp[0][2] = 100 / price[0][1];

        for (int i = 1; i < n; i++) {
            dp[i][0] = Math.max(Math.max(dp[i-1][1]*price[i][0], dp[i-1][2]*price[i][1]), dp[i-1][0]);
            dp[i][1] = Math.max(dp[i-1][0]/price[i][0], dp[i-1][1]);
            dp[i][2] = Math.max(dp[i-1][0]/price[i][1], dp[i-1][2]);
        }

        System.out.printf("%.2f", dp[n-1][0]);
    }
}
