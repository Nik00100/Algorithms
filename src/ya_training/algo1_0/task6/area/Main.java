package ya_training.algo1_0.task6.area;

/*Городская площадь имеет размер n× m и покрыта квадратной плиткой размером 1× 1. При плановой замене плитки выяснилось,
что новой плитки недостаточно для покрытия всей площади, поэтому было решено покрыть плиткой только дорожку по краю площади,
а в центре площади разбить прямоугольную клумбу (см. рисунок к примеру). При этом дорожка должна иметь одинаковую ширину по
всем сторонам площади. Определите максимальную ширину дорожки, которую можно выложить из имеющихся плиток.

Формат ввода
Первая и вторая строки входных данных содержат по одному числу n и m (3≤ n ≤ 2× 109, 3≤ m ≤ 2× 109) — размеры площади.

Третья строка содержит количество имеющихся плиток t, 1≤ t< nm.

Обратите внимание, что значение t может быть больше, чем возможное значение 32-битной целочисленной переменной, поэтому
необходимо использовать 64-битные числа (тип int64 в языке Pascal, тип long long в C и C++, тип long в Java и C#).

Формат вывода
Программа должна вывести единственное число — максимальную ширину дорожки, которую можно выложить из имеющихся плиток.
                         __ __ __ __ __ __ __
Пример                  |                    |
Ввод	Вывод           |      __ __ __      |
6                       |     |        |     |
7                       |     |__ __ __|     |
38                      |                    |
                        |__ __ __ __ __ __ __|
2*/

import java.io.*;

public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        long n = Long.parseLong(reader.readLine());
        long m = Long.parseLong(reader.readLine());
        long t = Long.parseLong(reader.readLine());

        long l = 0;
        long r = Math.min(n / 2, m / 2);


        // сначала все хорошо, потом плохо - последнее подходящее
        while (l < r) {
            // middle - это ширина дорожки
            // округление вверх
            long middle = (r + l + 1) / 2;
            // Площадь клумбы
            long sFlowerbed = (n - middle * 2) * (m - middle * 2);
            // Количество использованной плитки (Sобщая - Sклумбы)
            long q = n * m - sFlowerbed;
            if (q > t) {
                r = middle - 1;
            } else {
                l = middle;
            }
        }

        System.out.println(l);

        reader.close();
    }
}
