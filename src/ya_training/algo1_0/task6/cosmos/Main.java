package ya_training.algo1_0.task6.cosmos;

/*Для освоения Марса требуется построить исследовательскую базу. База должна состоять из n одинаковых модулей, каждый из которых представляет собой прямоугольник.

Каждый модуль представляет собой жилой отсек, который имеет форму прямоугольника размером a на b метров. Для повышения надежности модулей инженеры могут добавить вокруг каждого модуля слой дополнительной защиты. Толщина этого слоя должна составлять целое число метров, и все модули должны иметь одинаковую толщину дополнительной защиты. Модуль с защитой, толщина которой равна d метрам, будет иметь форму прямоугольника размером (a+2d)(b+2d) метров.

Все модули должны быть расположены на заранее подготовленном прямоугольном поле размером wh метров. При этом они должны быть организованы в виде регулярной сетки: их стороны должны быть параллельны сторонам поля, и модули должны быть ориентированы одинаково.

Требуется написать программу, которая по заданным количеству и размеру модулей, а также размеру поля для их размещения, определяет максимальную толщину слоя дополнительной защиты, который можно добавить к каждому модулю.

Формат ввода
Входной файл содержит пять разделенных пробелами целых чисел: n, a, b, w и h (1 ≤ n, a, b, w, h ≤ 1018). Гарантируется, что без дополнительной защиты все модули можно разместить в поселении описанным образом.

Формат вывода
Выходной файл должен содержать одно целое число: максимальную возможную толщину дополнительной защиты. Если дополнительную защиту установить не удастся, требуется вывести число 0.

Пример 1
Ввод	Вывод
1 1 1 1 1
0
Пример 2
Ввод	Вывод
1 1 1 3 3
1*/
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String[] arrNABWH = reader.readLine().split(" ");
        long n = Long.parseLong(arrNABWH[0]); // всего модулей
        long a = Long.parseLong(arrNABWH[1]);
        long b = Long.parseLong(arrNABWH[2]);
        long w = Long.parseLong(arrNABWH[3]);
        long h = Long.parseLong(arrNABWH[4]);

        long l = 0;
        long r = Math.min(Math.max(Math.max(w - a, w - b), 0), Math.max(Math.max(h - a, h - b), 0));
        while (r > l + 1) {
            long d = (l + r) / 2;
            long moduleA = (a + 2 * d);
            long moduleB = (b + 2 * d);
            long res = Math.max((w / moduleA) * (h / moduleB), (w / moduleB) * (h / moduleA));

            if (res < n) {
                r = d;
            } else {
                l = d;
            }
        }

        System.out.println(l);

        reader.close();
    }
}
