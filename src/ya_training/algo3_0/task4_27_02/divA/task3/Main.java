package ya_training.algo3_0.task4_27_02.divA.task3;

/*В околоземном космическом пространстве накопилось много мусора, поэтому ученые сконструировали специальный аппарат – ловушку
для космического мусора. Для того, чтобы хорошо собирать мусор, этот аппарат должен двигаться по достаточно сложной траектории,
сжигая собранный по пути мусор. Ловушка может передвигаться в пространстве по 6 направлениям: на север (N), на юг (S), на запад (W),
 на восток (E), вверх (U) и вниз (D). Движением ловушки управляет процессор. Программа движения задается шестью правилами движения,
 которые соответствуют каждому из указанных направлений. Каждое такое правило представляет собой строку символов из множества
 N, S, W, E, U, D.

Команда ловушки есть пара из символа направления и параметра – целого положительного числа M. При исполнении такой команды ловушка
в соответствии со своей программой выполняет следующее. Если параметр больше 1, то она перемещается на один метр в направлении,
которое указано в команде, а затем последовательно выполняет команды, заданные правилом для данного направления, с параметром меньше
 на 1. Если же параметр равен 1, то просто перемещается на один метр в указанном направлении.

Пусть, например, заданы следующие правила:



Тогда при выполнении команды S(3) мусорщик выполнит следующие действия:

1) переместится на 1 метр в направлении S

2) выполнит последовательно команды N(2), U(2), S(2), D(2), D(2), U(2), S(2), E(2).

Если далее проанализировать действия мусорщика при выполнении команд из пункта 2, получим, что в целом он совершит следующие
перемещения:

SNNUUSNUSDDUSEDWEDDWEDUUSNUSDDUSEE

По заданной команде определите, какое общее количество перемещений на один метр совершит ловушка при выполнении заданной команды.
В приведенном примере это количество равно 34.

Формат ввода
Первые шесть строк входного файла задают правила для команд с направлением N, S, W, E, U и D соответственно. Каждая строка содержит
не более 100 символов (и может быть пустой). Следующая строка содержит команду ловушки: сначала символ из множества
N, S, W, E, U, D, затем пробел и параметр команды – целое положительное число, не превышающее 100.

Формат вывода
Выведите в выходной файл единственное число – количество перемещений, которое совершит ловушка. Гарантируется, что ответ не
превышает 10^9.

Пример
Ввод
N
NUSDDUSE
UEWWD

U
WED
S 3

Вывод
34*/

import java.util.HashMap;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // матрица учета количества перемещений для каждого параметра правила по направлению
        int[][] counts = new int[6][6];
        // фактически счетчик по каждому направлению до максимального параметра (он ограничен 100 в задаче)
        // в ответе берем параметр param, он указан далее
        int[][] dp = new int[101][6];


        // номер для каждого направления
        HashMap<Character, Integer> directions = new HashMap<>();
        String[] dirs = {"N", "S", "W", "E", "U", "D"};

        for (int i = 0; i < dirs.length; i++) {
            directions.put(dirs[i].charAt(0), i);
        }

        for (int i = 0; i < dirs.length; i++) {
            String str = sc.nextLine();
            for (int j = 0; j < str.length(); j++) {
                char ch = str.charAt(j);
                counts[i][directions.get(ch)] += 1;
            }
        }

        String[] inputArr = sc.nextLine().split(" ");
        String command = inputArr[0];
        int param = Integer.parseInt(inputArr[1]);

        for (int i = 0; i <= param; i++) {
            for (int j = 0; j < dirs.length; j++) {
                dp[i][j] = 1;
            }
        }

        // заполняем таблицу dp до максимального параметра
        for (int p = 2; p <= param; p++) {
            for (int curDir = 0; curDir < dirs.length; curDir++) {
                for (int nextDir = 0; nextDir < dirs.length; nextDir++) {
                    int res = dp[p - 1][nextDir] * counts[curDir][nextDir];
                    dp[p][curDir] += res;
                }
            }
        }

        System.out.println(dp[param][directions.get(command.charAt(0))]);
        sc.close();
    }
}