package ya_training.algo3_0.task2_17_02.divA.task3;

/*На вокзале есть K тупиков, куда прибывают электрички. Этот вокзал является их конечной станцией, поэтому электрички, прибыв,
некоторое время стоят на вокзале, а потом отправляются в новый рейс (в ту сторону, откуда прибыли).

Дано расписание движения электричек, в котором для каждой электрички указано время ее прибытия, а также время отправления
в следующий рейс. Электрички в расписании упорядочены по времени прибытия. Поскольку вокзал — конечная станция, то электричка
может стоять на нем довольно долго, в частности, электричка, которая прибывает раньше другой, отправляться обратно может
значительно позднее.

Тупики пронумерованы числами от 1 до K. Когда электричка прибывает, ее ставят в свободный тупик с минимальным номером.
При этом если электричка из какого-то тупика отправилась в момент времени X, то электричку, которая прибывает в момент времени X,
в этот тупик ставить нельзя, а электричку, прибывающую в момент X+1 — можно.

Напишите программу, которая по данному расписанию для каждой электрички определит номер тупика, куда прибудет эта электричка.

Формат ввода
Сначала вводятся число K — количество тупиков и число N — количество электропоездов (1 ≤ K≤100000, 1 ≤ N ≤ 100000). Далее следуют
N строк, в каждой из которых записано по 2 числа: время прибытия и время отправления электрички. Время задается натуральным числом,
не превышающим 109. Никакие две электрички не прибывают в одно и то же время, но при этом несколько электричек могут отправляться
в одно и то же время. Также возможно, что какая-нибудь электричка (или даже несколько) отправляются в момент прибытия какой-нибудь
другой электрички. Время отправления каждой электрички строго больше времени ее прибытия.

Все электрички упорядочены по времени прибытия. Считается, что в нулевой момент времени все тупики на вокзале свободны.

Формат вывода
Выведите N чисел — по одному для каждой электрички: номер тупика, куда прибудет соответствующая электричка. Если тупиков
не достаточно для того, чтобы организовать движение электричек согласно расписанию, выведите два числа: первое должно равняться
 0 (нулю), а второе содержать номер первой из электричек, которая не сможет прибыть на вокзал.

Пример 1
Ввод	Вывод
1 1
2 5

1
Пример 2
Ввод	Вывод
1 2
2 5
5 6

0 2*/

import java.util.*;
import java.io.*;

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader("input.txt"));
        PrintWriter out = new PrintWriter(new FileWriter("output.txt"));

        String[] kn = in.readLine().split(" ");
        int k = Integer.parseInt(kn[0]);
        int n = Integer.parseInt(kn[1]);

        int[] inTime = new int[n];
        int[] outTime = new int[n];

        for (int i = 0; i < n; ++i) {
            String[] line = in.readLine().split(" ");
            inTime[i] = Integer.parseInt(line[0]);
            outTime[i] = Integer.parseInt(line[1]);
        }

        PriorityQueue<Integer> freeGarages = new PriorityQueue<Integer>();
        for (int i = 1; i <= k; i++) {
            freeGarages.offer(i);
        }

        int[] ans = new int[n];
        Queue<int[]> trainQueue = new PriorityQueue<>((a, b) -> Integer.compare(a[0], b[0]));
        for (int i = 0; i < n; ++i) {
            while (!trainQueue.isEmpty() && trainQueue.peek()[0] < inTime[i]) {
                int[] train = trainQueue.poll();
                freeGarages.offer(train[1]);
            }
            if (freeGarages.isEmpty()) {
                out.println(String.format("0 %d", i + 1));
                in.close();
                out.close();
                return;
            }
            ans[i] = freeGarages.poll();
            trainQueue.offer(new int[] { outTime[i], ans[i] });
        }

        for (int i = 0; i < n; i++)
            out.println(ans[i]);

        out.close();
        in.close();
    }
}

